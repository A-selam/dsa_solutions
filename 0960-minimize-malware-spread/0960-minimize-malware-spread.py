class UnionFind:
    def __init__(self, size, initial):
        self.parent = [i for i in range(size)]
        self.size = [1] * size
        self.infectedSize = [0] * size
        for node in initial:
            self.infectedSize[node] = 1

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)

        if rootX == rootY:
            return 

        if self.size[rootX] < self.size[rootY]:
            self.parent[rootX] = rootY
            self.size[rootY] += self.size[rootX]
            self.infectedSize[rootY] += self.infectedSize[rootX]
        else:
            self.parent[rootY] = rootX
            self.size[rootX] += self.size[rootY]
            self.infectedSize[rootX] += self.infectedSize[rootY]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n, initial)

        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        
        ans = [-1, -1]
        for node in initial:
            parent = uf.find(node)
            savedSize, infSize = uf.size[parent], uf.infectedSize[parent]
            if infSize > 1:
                savedSize = 0

            if savedSize > ans[1]:
                ans = [node, savedSize]
            elif savedSize == ans[1]:
                ans[0] = min(ans[0], node)
        
        return ans[0]